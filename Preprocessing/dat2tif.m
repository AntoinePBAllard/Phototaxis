%% This .m file convert dat files generated by Andor Solis software into tif files. The .tif files are stored in the same folder as the one that contains the .dat files.
% v0: 2021-06-25, Allard A.

%% INPUT
% path: (string) folder that contains .dat files and acquisitionmetadata.ini

function dat2tif(path)

if nargin < 1 % If no path is specified, then ask user to select a folder
    path = uigetdir([],'Select a folder that contains .dat files and acquisitionmetadata.ini');
end

if ~path
    return
end

cd(path); % Change directory
paramfile = 'acquisitionmetadata.ini';
if ~exist(paramfile,'file')
    error('acquisitionmetadata.ini file is missing.')
end

list = ls('*.dat');
n = 0;
for j = 1:size(list,1)
    datfile = list(j,:);
    andorImage = readAndorDatImage(datfile,paramfile);
    for ii = 1:size(andorImage,3)
        n = n + 1;
        im = squeeze(andorImage(:,:,ii));
        tifname = strcat(num2str(n,'%06.f'),'.tif');
        imwrite(im,tifname)
    end
end


    %% This has been downloaded from Matworks on the 2021-05-27
    %% I changed few things to make it work, e.g. the part with the C++ code was not working

    function [andorImage, bFileDoesNotExist] = readAndorDatImage(rawDataFileName, param_file_name)
    %param_file_name = '/acquisitionmetadata.ini';
    %rawDataFileName = '/XXXXXspool.dat';

    % parse the paramFile here
    param_ch1 = struct('fileName', param_file_name);
    param_file_ptr = fopen (param_file_name, 'r');
    tokeniser = '=';
    file = textscan(param_file_ptr,'%s','Delimiter','\n');
    file = file{1};
    for i = 1:length(file)
        line = file{i};
        if ~isempty(line) && ~contains(line,'[')
            paramValue = line ((strfind (line, tokeniser) + 2):end);
            paramName = line (1:(strfind (line, tokeniser) - 2));
            if (contains(paramName, 'AOI'))
                paramValue = str2double(paramValue);
            end
            if (contains(paramName, 'Bytes'))
                paramValue = str2double(paramValue);
            end
            if (contains(paramName, 'ImagesPerFile'))
                paramValue = str2double(paramValue);
            end
            param_ch1.(paramName) = paramValue;
        end
    end
    fclose(param_file_ptr);

    % Original:Call C function to readAndor dat file
    % Here I created a m version instead of c
    filePtr = fopen(rawDataFileName);
    if (filePtr == -1)
        bFileDoesNotExist = 1;
    else
        bFileDoesNotExist = 0;
        fclose (filePtr);
    end
    if (bFileDoesNotExist)
        andorImage = zeros(param_ch1.AOIWidth, param_ch1.AOIHeight);
    else
        andorImage = readAndorDatFile(rawDataFileName,param_ch1);
    end

    andorImage = uint16(andorImage);

    end


    function andorImage = readAndorDatFile(rawDataFileName,params)
    fid = fopen(rawDataFileName);
    file = fread(fid);
    file = reshape(file,[],params.ImagesPerFile);

    for iImage = 1:params.ImagesPerFile
        I = file(:,iImage);
        aoiHeight = params.AOIHeight;
        aoiStrideLength = params.AOIStride;
        aoiWidth = params.AOIWidth;

        % % Convert the byte stream data to unsigned short data */
        for iRow = 0:aoiHeight-1
            iRowStart = iRow * aoiStrideLength;
            for iColumn = 0:aoiStrideLength-1
                iPixel = iRowStart + iColumn;
                usInputPixels(iPixel+1) = I(iPixel+1);
            end
        end

        % % Unpack the 12MonoPacked to unsigned shorts*/
        for iRow = 0:aoiHeight-1
            iInputRowStart = iRow * aoiStrideLength;
            iOutputRowStart = iRow * aoiWidth;
            for iColumn = 0:2:aoiWidth-1
                iInputPixel = iInputRowStart + (iColumn * 3)/2;
                iOutputPixel = iOutputRowStart + iColumn;
                usOutputPixels(iOutputPixel+1) = (usInputPixels(iInputPixel+1)*2^4) + mod(usInputPixels(iInputPixel+2),16);
                usOutputPixels(iOutputPixel+2) = (usInputPixels(iInputPixel+3)*2^4) + floor(usInputPixels(iInputPixel+2) / 2^4);
            end
        end

        Image = reshape(usOutputPixels,aoiWidth,aoiHeight);
        andorImage(:,:,iImage) = flip(Image',1);

    end
    fclose(fid);
    end

end
